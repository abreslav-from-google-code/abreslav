/**
  1. Create new classes: like QN
  2. Redirect reference type [and may be it's descendants] (reference type replaced with String name)
  3. Skip mapping of some classes (Package or abstract Type)
  4. Change inheritance hierarchy (make built-in types AS extend TypeReferenceAS)
  5. (?) Meta-symbol to retrieve one's transformational image (img() function?)
*/

create class CompilationUnitAS {
	val QualifiedName[*] imports;
	val img(Class)[*] classes;
}

create abstract class TypeReferenceAS {
}

never map class Type;

map BasicType to extend TypeReferenceAS;
map ArrayType to extend TypeReferenceAS;

create class QualifiedName {
	attr String name;
	val QualifiedName subQN;
}

create class ClassReferenceAS extends TypeReferenceAS {
	val QualifiedName qn;
}

refer Type as TypeReferenceAS;

never map class Package;

refer Class as ClassReferenceAS;
  
refer Package as QualifiedName;
  
refer Valiable as String;
  
//refer Method as String;
//refer Field as String;
refer Member+ as String;