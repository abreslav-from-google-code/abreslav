tree grammar PascalUnitTypeGenerator;

options {
  tokenVocab=Pascal;
  ASTLabelType=CommonTree;
}

@header {
  package pascal.parser;
}

program returns [java.util.Collection<Variable> variables] 
	: head? v=var? block
	{$variables = v;}
	;
head : ^('program' Id);
var  returns [java.util.Collection<Variable> variables]
@init{
	$variables = new java.util.ArrayList<Variable>();
}
	: ^('var' variables[$variables]+)
	{};
	
variables [java.util.Collection<Variable> variables]
	: ^(typ=Id (name=Id {$variables.add(new Variable($typ.text, $name.text));})*)
	;
	
block 
	: ^('begin' (statement)*)
	;
statement 
	: assign
	| ifThenElse 
	| whileDo
	| block
	| ^('|' st=statement assertExpr)
	| ^(':' assertExpr st=statement)
	;
assign 
	: ^(':=' Id expression)
	;
ifThenElse 
	: ^('if' expression th=statement)
	| ^('else' ^('if' expression th=statement) el=statement)
	;
whileDo 
	: ^('while' expression statement)
	;
expression
    : ^(op='+' a=expression b=expression)
    | ^(op='-' a=expression b=expression)
    | ^(op='-' '-' r=expression)
    | ^(op='<' a=expression b=expression)
    | ^(op='>' a=expression b=expression)
	| Id
	| Num
	;
	
assertExpr
	: JavaStr 
	| Num
	| ^(':' String Num )
	;