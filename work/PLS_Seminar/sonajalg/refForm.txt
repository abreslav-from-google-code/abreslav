PROGRAMMING LANGUAGES SEMINAR

Referee name   : Andrey Breslav
Referee e-mail : abreslav@gmail.com

--------------------------------------------------------------

REFEREED PAPER
Author  : Sander SÃµnajalg
Title   : Program Analysis Techniques for Method Call Devirtualization in Object-Oriented Languages


OVERALL MARK  (1-5)    : 3

The defult marking scale is 1-5 (5 highest positive, 1 "fail").
Some items may have additional explanations when to use which marks.
If there is a comment field, please add a short explananation of your
mark (1-2 sentences).

TITLE (1-5)     : 5
[Is the title clear and succinct describing the subject of the paper?]
COMMENT:

STRUCTURE (1-5)  : 5
[Does the paper have all required components; is the main text
suitably structured?]
COMMENT:

ABSTRACT (1-5)     : 3
[Is the abstract generally understandable; does it fulfill its purpose?]
COMMENT:
Abstract does not clearly describe the content of the paper. Looks more like the first paragraph of an introduction.

INTRODUCTION (1-5) : 5
[Does the introduction give an adequate overview, motivation, problem
description, etc?]
COMMENT:

REFERENCES (1-5): 4
[Is the bibliography accurate and up-to-date; are all references
referred somewhere in the text; etc?]
COMMENT: No actively used bibliography is newer than 9 years old, the most part of the report relies on the work done in the middle nineties.


ACCESSIBILITY (1-5)     : 2
   5 - is accessible only for a specialist in the given specific area
   4 - is accessible for a person having a good general overview in the area
   3 - understandable for any CS/IT master student interested on Prog.Languages
   2 - understandable for any CS/IT student
   1 - understandable for general audience

READABILITY (1-5)     : 3
   5: very good
   4: basically well written
   3: readable
   2: poor, needs considerable work
   1: unacceptably bad


DENSITY (1-5)     : 2
[Is the length of the paper suitable for the content; or is the paper
too light-weight (eg. 20 pages where 2 would be enough); or too tensly
"packed" (too much materila for the given length)]
COMMENT: The paper is very light-weight, most concepts presented are trivial and deserve almost no explanation.

LANGUAGE (1-5): 3
COMMENT: Many articles are left out, some words, expressions and tenses are misused.

--------------------------------------------------------------

REFEREE

COMPETENCE (1-5) : 5 (I have supervised a project on similar topic)
   5 - expert (eg. I have written a paper in similar topic)
   4 - well informed (eg. I had participated in lectures/seminars on a similar topic)
   3 - moderately familiar (eg. I have read a paper in a similar topic)
   2 - informed outsider (eg. I have a basic knowledge in the general area)
   1 - stranger (eg. the topic is completely alien to me)

CONFIDENCE (1-5)  : 5
   5 - I'm completely sure that all given marks are fair and correct
   3 - I'm quite sure that most marks are fair and correct
   1 - I wish and hope that my marks are fairer than tossing a coin

TIME SPENT (in hours): 2

UNDERSTANDING (1-5)   : 5
   5 - all details were clair and understandable
   3 - understood the main idea, but not all details
   1 - couldn't understand almost anything

--------------------------------------------------------------

REFEREE REPORT

Short overview of the paper (one/two paragraphs about the content;
doesn't give an evaluation, but demonstrates your understanding of the
paper).

The paper reports on techniques for devirtualizing function calls in object-oriented languages like Java and C++.
It starts with a fairly detailed presentation of the problem, then presents three techniques:
1) Class Hierarchy Analysis, which essentially looks for calls to methods which are never overriden in the class hierarchy under the static type of the receiver object;
2) Rapid Type Analysis, which looks for all object creation statements in the program and excludes those which are never instantiated from the hierarchy considered by (1);
3) Variable-Type Analysis, which performs a control-flow independent analysis of possible run-time types of object references in the program and devirtualizes calls for which receivers may have only one possible run-time type.

The report proceeds with some reasoning about the applicability of the presented techniques, JIT-compiled languages are concluded to introduce more challenges for devirtualization due to their capability of loading classes at run time, compared to C++-like languages.
The presented techniques are reported to be able to detect not less than 50% of all devirtualizable call sites in some benchmark programs.
The conclusion mentions the existence of more sophisticated analyses like points-to analyses or fragment class analysis.

A general assessment of the paper, pointing out positive and negative
aspects.

The upside of the paper is that it might understandable for almost everyone who knows what a compiler is and what OO-languages are (if we ignore some downsides).

The main downsides are the following:
 * the author illustrates the techniques based on the closed-world assumption using the Java programming language, for which this assumption does not hold, as the author claims in the concluding section; this is very confusing for the reader;
 * there is much duplication in the latter half of the paper: the same points are argued several times with the same reasons;
 * the language must be polished.


Concrete recommendations for improvments (incl. minimal requirements
for the final version).

The main body of the paper (Sections 3-5) must be refactored in order to avoid false claims like applicability of static hierarchy analyses for Java. I have to point out that the very presence of any class-loading code in the compiled program is not necessary for the close-world assumption to be false. It is enough to have a public method with accepts an object as parameter. A class with such a method might be loaded into an arbitrary environment, which may contribute a bunch of new classes to whatever hierarchy.

Section 6 should be abridged to avoid self-duplication.

It is also desirable to place the listings and figures closer to the places in the text which refer to them. Although it might not be always possible.

Typos:

C++ of the compiled languages

any of it's subclasses

The runtime type class can override the non-private instance method

sends ) --- full stop missing

examplified

They main goal is to find the set of

proposed by [9] --- in

Node C.m.p denotes the argument or the local variable p of method m of class C. --- parameter

Processing of a node involves copying all the types from its ReachingTypesset to the ReachingTypessets --- visible spaces needed

If the compilation happens in the end-user's machine --- on

Decleared-type analysis
